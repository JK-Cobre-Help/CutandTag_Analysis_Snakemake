# Snakefile for Cut and Tag Pipeline to Generate SAM/BAM/BIGWIG files
# Author: Kevin Boyd
# Adapted for Snakemake by <Your Name>

configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

import pandas as pd

# Load sample information from ids.txt
samples_table = pd.read_csv("config/ids.txt", header=None, names=["R1", "R2"]).set_index("R1", drop=False)

# Define fastq input function
def fq_dict_from_sample(wildcards):
    return {
        "fq1": config["fastqPath"] + "/" + wildcards.sample + "_R1_001.fastq.gz",
        "fq2": config["fastqPath"] + "/" + wildcards.sample + "_R2_001.fastq.gz"
    }

# Define project directories
fastqPath = config["fastqPath"]
projPath = config["projPath"]

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        expand("{projPath}/fastqc/{sample}_fastqc.html", sample=samples_table.index),
        expand("{projPath}/fastq_screen/{sample}_screen.txt", sample=samples_table.index),
        expand("{projPath}/alignment/sam/{sample}_bowtie2.sam", sample=samples_table.index),
        expand("{projPath}/alignment/bam/{sample}_bowtie2.bam", sample=samples_table.index),
        expand("{projPath}/alignment/bam/{sample}.sorted.bam", sample=samples_table.index),
        expand("{projPath}/alignment/bigwig/{sample}_raw.bw", sample=samples_table.index),
        expand("{projPath}/alignment/bigwig/scale_reads/{sample}_scaled.bw", sample=samples_table.index)

##################################################################
##                       Quality Control                        ##
##################################################################

rule fastqc:
    input:
        fq1=fastqPath + "/{sample}_R1_001.fastq.gz"
    output:
        fastqc_report=projPath + "/fastqc/{sample}_fastqc.html"
    log: projPath + "/logs/fastqc_{sample}.log"
    shell:
        """
        fastqc {input.fq1} -o {projPath}/fastqc
        """

rule fastq_screen:
    input:
        fq1=fastqPath + "/{sample}_R1_001.fastq.gz"
    output:
        fastq_screen_out=projPath + "/fastq_screen/{sample}_screen.txt"
    log: projPath + "/logs/fastq_screen_{sample}.log"
    shell:
        """
        fastq_screen --conf /hpc-prj/kirkland/shared/scripts/fastq_screen.conf --threads 16 --outdir {projPath}/fastq_screen {input.fq1}
        """

##################################################################
##                       Read Alignment                         ##
##################################################################

rule align_with_bowtie2:
    input:
        fq1=fastqPath + "/{sample}_R1_001.fastq.gz",
        fq2=fastqPath + "/{sample}_R2_001.fastq.gz"
    output:
        sam=projPath + "/alignment/sam/{sample}_bowtie2.sam",
        bowtie2_summary=projPath + "/alignment/sam/bowtie2_summary/{sample}_bowtie2.txt"
    log: projPath + "/logs/align_with_bowtie2_{sample}.log"
    shell:
        """
        bowtie2 --end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700 -p 8 \
        -x /hpc-prj/kirkland/shared/scripts/mm10_bowtie2_index/mm10 \
        -1 {input.fq1} -2 {input.fq2} -S {output.sam} &> {output.bowtie2_summary}
        """

##################################################################
##                     SAM to BAM Conversion                    ##
##################################################################

rule sam_to_bam:
    input:
        sam=projPath + "/alignment/sam/{sample}_bowtie2.sam"
    output:
        bam=projPath + "/alignment/bam/{sample}_bowtie2.bam"
    log: projPath + "/logs/sam_to_bam_{sample}.log"
    shell:
        """
        samtools view -bS {input.sam} > {output.bam}
        """

##################################################################
##                  BAM Sorting and Indexing                    ##
##################################################################

rule sort_bam:
    input:
        bam=projPath + "/alignment/bam/{sample}_bowtie2.bam"
    output:
        sorted_bam=projPath + "/alignment/bam/{sample}.sorted.bam"
    log: projPath + "/logs/sort_bam_{sample}.log"
    shell:
        """
        samtools sort -o {output.sorted_bam} {input.bam}
        """

rule index_bam:
    input:
        sorted_bam=projPath + "/alignment/bam/{sample}.sorted.bam"
    output:
        bai=projPath + "/alignment/bam/{sample}.sorted.bam.bai"
    log: projPath + "/logs/index_bam_{sample}.log"
    shell:
        """
        samtools index {input.sorted_bam}
        """

##################################################################
##                       BigWig Generation                      ##
##################################################################

rule make_bigwig_raw:
    input:
        sorted_bam=projPath + "/alignment/bam/{sample}.sorted.bam"
    output:
        bigwig=projPath + "/alignment/bigwig/{sample}_raw.bw"
    log: projPath + "/logs/make_bigwig_raw_{sample}.log"
    shell:
        """
        bamCoverage -b {input.sorted_bam} -o {output.bigwig}
        """

##################################################################
##                  Total Reads and Scale Factor                ##
##################################################################

rule calculate_total_reads:
    input:
        sorted_bam=projPath + "/alignment/bam/{sample}.sorted.bam"
    output:
        total_reads=temp(projPath + "/alignment/{sample}_total_reads.txt"),
        scale_factor=temp(projPath + "/alignment/{sample}_scale_factor.txt")
    log: projPath + "/logs/calculate_total_reads_{sample}.log"
    shell:
        """
        total_reads=$(samtools view -c -F 4 {input.sorted_bam})
        scale_factor=$(echo "1 / ($total_reads / 1000000)" | bc -l)
        echo $total_reads > {output.total_reads}
        echo $scale_factor > {output.scale_factor}
        """

##################################################################
##              Scaled BigWig with Normalization                ##
##################################################################

rule make_bigwig_scaled:
    input:
        sorted_bam=projPath + "/alignment/bam/{sample}.sorted.bam",
        scale_factor=projPath + "/alignment/{sample}_scale_factor.txt"
    output:
        bigwig_scaled=projPath + "/alignment/bigwig/scale_reads/{sample}_scaled.bw"
    log: projPath + "/logs/make_bigwig_scaled_{sample}.log"
    shell:
        """
        scale_factor=$(cat {input.scale_factor})
        bamCoverage -b {input.sorted_bam} -o {output.bigwig_scaled} --scaleFactor $scale_factor
        """
